{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { useState } from \"react\";\nimport react from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar loginInfo = {};\n\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var bp = require(\"../components/Path\");\n\n  var loginEmail, loginPassword;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var attemptLogin = function attemptLogin(event) {\n    var loginInfo, js, config;\n    return _regeneratorRuntime.async(function attemptLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            loginInfo = {\n              email: loginEmail.value,\n              password: loginPassword.value\n            };\n            js = JSON.stringify(loginInfo);\n            config = {\n              method: \"POST\",\n              url: bp.buildPath(\"api/login\"),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              data: js\n            };\n            axios(config).then(function (response) {\n              var res = response.data;\n\n              if (res.error) {\n                setMessage(\"Invalid email or password\");\n              } else {\n                window.location.href = \"/dashboard\";\n              }\n            }).catch(function (error) {\n              console.log(error);\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      username = _useState4[0],\n      setUsername = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  return _jsxs(View, {\n    style: styles.background,\n    children: [_jsx(View, {\n      style: styles.smallPadding\n    }), _jsx(Image, {\n      style: {\n        height: 200,\n        width: 200\n      },\n      source: require(\"../assets/logo.png\")\n    }), _jsx(View, {\n      style: styles.smallPadding\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Username\",\n      secureTextEntry: false,\n      onChangeText: function onChangeText(newUsername) {\n        return setUsername(newUsername);\n      },\n      defaultValue: username\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(newPassword) {\n        return setPassword(newPassword);\n      },\n      defaultValue: password\n    }), _jsx(View, {\n      style: styles.loginSquare,\n      children: _jsx(Button, {\n        title: \"Login\",\n        color: \"#fff\",\n        onPress: function _callee() {\n          var loginCredentials, stringifyCreds, response, responseRes;\n          return _regeneratorRuntime.async(function _callee$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  loginCredentials = {\n                    email: username,\n                    password: password\n                  };\n                  stringifyCreds = JSON.stringify(loginCredentials);\n                  _context2.next = 5;\n                  return _regeneratorRuntime.awrap(fetch('https://shreddit-ucf.herokuapp.com/api/login', {\n                    method: 'POST',\n                    body: stringifyCreds,\n                    headers: {\n                      'Content-Type': 'application/json'\n                    }\n                  }));\n\n                case 5:\n                  response = _context2.sent;\n                  _context2.t0 = JSON;\n                  _context2.next = 9;\n                  return _regeneratorRuntime.awrap(response.text());\n\n                case 9:\n                  _context2.t1 = _context2.sent;\n                  responseRes = _context2.t0.parse.call(_context2.t0, _context2.t1);\n                  console.log(responseRes);\n\n                  if (responseRes.id <= 0) {\n                    console.log(\"Error at responseRes\");\n                  } else {\n                    global.firstName = responseRes.firstName;\n                    global.firstName = responseRes.firstName;\n                    global.firstName = responseRes.firstName;\n                  }\n\n                  _context2.next = 18;\n                  break;\n\n                case 15:\n                  _context2.prev = 15;\n                  _context2.t2 = _context2[\"catch\"](0);\n                  console.log(\"ERROR HERE\");\n\n                case 18:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, [[0, 15]], Promise);\n        }\n      })\n    }), _jsx(View, {\n      style: styles.backSquare,\n      children: _jsx(Button, {\n        title: \"Back\",\n        color: \"#fff\",\n        onPress: function onPress() {\n          return console.log(\"Back\");\n        }\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    resizeMode: \"contain\"\n  },\n  backSquare: {\n    position: \"absolute\",\n    bottom: \"7%\",\n    width: \"80%\",\n    height: \"7%\",\n    backgroundColor: \"red\",\n    justifyContent: \"center\"\n  },\n  colorTop: {\n    backgroundColor: \"#ACD1AF\",\n    width: \"100%\",\n    height: \"15%\",\n    borderRadius: 20,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  input: {\n    height: \"5%\",\n    width: \"80%\",\n    margin: 12,\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10\n  },\n  titleText: {\n    fontWeight: \"bold\",\n    color: \"white\",\n    fontSize: 30\n  },\n  smallPadding: {\n    padding: \"2%\"\n  },\n  loginSquare: {\n    position: \"absolute\",\n    bottom: \"15%\",\n    width: \"80%\",\n    height: \"7%\",\n    backgroundColor: \"#ACD1AF\",\n    justifyContent: \"center\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/Nathan/UCF_Classes/Spring2022/COP4331/MobileWorkoutApp/COP4331-WorkoutApp/screens/LoginScreen.js"],"names":["StatusBar","useState","react","NavigationContainer","createNativeStackNavigator","axios","loginInfo","LoginScreen","navigation","bp","require","loginEmail","loginPassword","message","setMessage","attemptLogin","event","preventDefault","email","value","password","js","JSON","stringify","config","method","url","buildPath","headers","data","then","response","res","error","window","location","href","catch","console","log","username","setUsername","setPassword","styles","background","smallPadding","height","width","input","newUsername","newPassword","loginSquare","loginCredentials","stringifyCreds","fetch","body","text","responseRes","parse","id","global","firstName","backSquare","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","resizeMode","position","bottom","colorTop","borderRadius","margin","borderWidth","padding","titleText","fontWeight","color","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport { useState } from \"react\";\r\nimport react from \"react-native\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Image,\r\n  ImageBackground,\r\n  Button,\r\n  TextInput,\r\n} from \"react-native\";\r\n\r\nimport {\r\n  Alert,\r\n  SafeAreaView,\r\n  TouchableWithoutFeedback,\r\n} from \"react-native-web\";\r\n\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n\r\nimport axios from \"axios\";\r\n\r\nvar loginInfo = {};\r\n\r\nfunction LoginScreen({ navigation }) {\r\n  var bp = require(\"../components/Path\");\r\n  // var storage = require(\"../tokenStorage.js\");\r\n\r\n  var loginEmail, loginPassword;\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const attemptLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n    var loginInfo = {\r\n      email: loginEmail.value,\r\n      password: loginPassword.value,\r\n    };\r\n\r\n    var js = JSON.stringify(loginInfo);\r\n\r\n    var config = {\r\n      method: \"POST\",\r\n      url: bp.buildPath(\"api/login\"),\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n\r\n      data: js,\r\n    };\r\n\r\n    axios(config)\r\n      .then(function (response) {\r\n        var res = response.data;\r\n\r\n        if (res.error) {\r\n          setMessage(\"Invalid email or password\");\r\n        } else {\r\n          // storage.storeToken(res);\r\n          // var jwt = require(\"jsonwebtoken\");\r\n\r\n          // var ud = jwt.decode(storage.retrieveToken(), {\r\n          //   complete: true\r\n          // });\r\n\r\n          // var userId = ud.payload.userId;\r\n          // var firstName = ud.payload.firstName;\r\n          // var lastName = ud.payload.lastName;\r\n\r\n          // var user = {\r\n          //   firstName: firstName,\r\n          //   lastName: lastName,\r\n          //   id: userId\r\n          // };\r\n\r\n          // localStorage.setItem(\"user_data\", JSON.stringify(user));\r\n\r\n          window.location.href = \"/dashboard\";\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  return (\r\n    // Main View\r\n    <View style={styles.background}>\r\n      {/* <View style = {styles.colorTop}>\r\n                <View style={styles.smallPadding}></View>\r\n                <Text style={styles.titleText}>Login</Text>\r\n            </View> */}\r\n\r\n      <View style={styles.smallPadding}></View>\r\n\r\n      <Image\r\n        style={{ height: 200, width: 200 }}\r\n        source={require(\"../assets/logo.png\")}\r\n      />\r\n\r\n      <View style={styles.smallPadding}></View>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Username\"\r\n        secureTextEntry={false}\r\n        onChangeText={(newUsername) => setUsername(newUsername)}\r\n        defaultValue={username}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Password\"\r\n        secureTextEntry={true}\r\n        onChangeText={(newPassword) => setPassword(newPassword)}\r\n        defaultValue={password}\r\n      />\r\n\r\n      <View style={styles.loginSquare}>\r\n        <Button\r\n          title=\"Login\"\r\n          color=\"#fff\"\r\n          //onPress={() =>  navigation.navigate(\"Home\")}\r\n\r\n          onPress = {async () => {\r\n            try {\r\n              const loginCredentials = {email: username, password: password};\r\n              var stringifyCreds = JSON.stringify(loginCredentials);\r\n\r\n              const response = await fetch('https://shreddit-ucf.herokuapp.com/api/login', {method: 'POST', body: stringifyCreds, headers: {'Content-Type': 'application/json'}});\r\n\r\n              var responseRes = JSON.parse(await response.text());\r\n\r\n              console.log(responseRes);\r\n\r\n              if(responseRes.id <= 0) {\r\n                console.log(\"Error at responseRes\");\r\n              }\r\n              else {\r\n                global.firstName = responseRes.firstName;\r\n                global.firstName = responseRes.firstName;\r\n                global.firstName = responseRes.firstName;\r\n              }\r\n            } catch(error) {\r\n              console.log(\"ERROR HERE\");\r\n            }\r\n          }} \r\n        />\r\n      </View>\r\n      <View style={styles.backSquare}>\r\n        <Button title=\"Back\" color=\"#fff\" onPress={() => console.log(\"Back\")} />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  background: {\r\n    flex: 1,\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"white\",\r\n    resizeMode: \"contain\",\r\n  },\r\n  backSquare: {\r\n    position: \"absolute\",\r\n    bottom: \"7%\",\r\n    width: \"80%\",\r\n    height: \"7%\",\r\n    backgroundColor: \"red\",\r\n    justifyContent: \"center\",\r\n  },\r\n  colorTop: {\r\n    backgroundColor: \"#ACD1AF\",\r\n    width: \"100%\",\r\n    height: \"15%\",\r\n    borderRadius: 20,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  input: {\r\n    height: \"5%\",\r\n    width: \"80%\",\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    padding: 10,\r\n  },\r\n  titleText: {\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    fontSize: 30,\r\n  },\r\n  smallPadding: {\r\n    padding: \"2%\",\r\n  },\r\n  loginSquare: {\r\n    position: \"absolute\",\r\n    bottom: \"15%\",\r\n    width: \"80%\",\r\n    height: \"7%\",\r\n    backgroundColor: \"#ACD1AF\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\nexport default LoginScreen;\r\n"]},"metadata":{},"sourceType":"module"}