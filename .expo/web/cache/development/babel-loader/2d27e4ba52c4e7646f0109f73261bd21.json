{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { useState } from \"react\";\nimport react from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport CustomButton from \"../components/CustomButton\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar loginInfo = {};\n\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var bp = require(\"../components/Path\");\n\n  var loginEmail, loginPassword;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var attemptLogin = function attemptLogin(event) {\n    var loginInfo, js, config;\n    return _regeneratorRuntime.async(function attemptLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            loginInfo = {\n              email: loginEmail.value,\n              password: loginPassword.value\n            };\n            js = JSON.stringify(loginInfo);\n            config = {\n              method: \"POST\",\n              url: bp.buildPath(\"api/login\"),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              data: js\n            };\n            axios(config).then(function (response) {\n              var res = response.data;\n\n              if (res.error) {\n                setMessage(\"Invalid email or password\");\n              } else {\n                window.location.href = \"/dashboard\";\n              }\n            }).catch(function (error) {\n              console.log(error);\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      username = _useState4[0],\n      setUsername = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  return _jsxs(View, {\n    style: styles.background,\n    children: [_jsx(View, {\n      style: styles.smallPadding\n    }), _jsx(Image, {\n      style: {\n        height: 200,\n        width: 200\n      },\n      source: require(\"../assets/logo.png\")\n    }), _jsx(View, {\n      style: styles.smallPadding\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Username\",\n      secureTextEntry: false,\n      onChangeText: function onChangeText(newUsername) {\n        return setUsername(newUsername);\n      },\n      defaultValue: username\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(newPassword) {\n        return setPassword(newPassword);\n      },\n      defaultValue: password\n    }), _jsx(View, {\n      style: {\n        marginHorizontal: 30\n      },\n      children: _jsx(CustomButton, {\n        secondary: true,\n        title: \"Login\",\n        loading: false,\n        disabled: false,\n        onPress: function _callee() {\n          var loginCredentials, stringifyCreds, response, responseRes;\n          return _regeneratorRuntime.async(function _callee$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n\n                  if (username == \"\" || password == \"\") {\n                    navigation.navigate(\"Login\");\n                  }\n\n                  loginCredentials = {\n                    email: username,\n                    password: password\n                  };\n                  stringifyCreds = JSON.stringify(loginCredentials);\n                  _context2.next = 6;\n                  return _regeneratorRuntime.awrap(fetch(\"https://shreddit-ucf.herokuapp.com/api/login\", {\n                    method: \"POST\",\n                    body: stringifyCreds,\n                    headers: {\n                      \"Content-Type\": \"application/json\"\n                    }\n                  }));\n\n                case 6:\n                  response = _context2.sent;\n                  console.log(response);\n                  _context2.t0 = JSON;\n                  _context2.next = 11;\n                  return _regeneratorRuntime.awrap(response.text());\n\n                case 11:\n                  _context2.t1 = _context2.sent;\n                  responseRes = _context2.t0.parse.call(_context2.t0, _context2.t1);\n                  console.log(responseRes);\n\n                  if (responseRes.error == \"No account belongs to that email.\") {\n                    console.log(\"Invalid Login Credentials\");\n                  } else if (responseRes.error == \"Account is not verified, please check email for verification email\") {\n                    console.log(\"Please verify your email\");\n                  } else {\n                    navigation.navigate(\"Home\");\n                  }\n\n                  _context2.next = 20;\n                  break;\n\n                case 17:\n                  _context2.prev = 17;\n                  _context2.t2 = _context2[\"catch\"](0);\n                  console.log(\"ERROR HERE\");\n\n                case 20:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, [[0, 17]], Promise);\n        },\n        style: styles.loginButton\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    resizeMode: \"contain\"\n  },\n  input: {\n    height: \"5%\",\n    width: \"80%\",\n    margin: 10,\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10\n  },\n  titleText: {\n    fontWeight: \"bold\",\n    color: \"white\",\n    fontSize: 30\n  },\n  smallPadding: {\n    marginVertical: \"10%\"\n  },\n  loginButton: {\n    height: 60,\n    paddingHorizontal: 5,\n    marginVertical: 20,\n    left: 2,\n    marginHorizontal: 35,\n    borderRadius: 15,\n    width: 200,\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/Nathan/UCF_Classes/Spring2022/COP4331/MobileWorkoutApp/COP4331-WorkoutApp/screens/LoginScreen.js"],"names":["StatusBar","useState","react","CustomButton","axios","loginInfo","LoginScreen","navigation","bp","require","loginEmail","loginPassword","message","setMessage","attemptLogin","event","preventDefault","email","value","password","js","JSON","stringify","config","method","url","buildPath","headers","data","then","response","res","error","window","location","href","catch","console","log","username","setUsername","setPassword","styles","background","smallPadding","height","width","input","newUsername","newPassword","marginHorizontal","navigate","loginCredentials","stringifyCreds","fetch","body","text","responseRes","parse","loginButton","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","resizeMode","margin","borderWidth","borderRadius","padding","titleText","fontWeight","color","fontSize","marginVertical","paddingHorizontal","left"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { useState } from \"react\";\nimport react from \"react-native\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  ImageBackground,\n  Button,\n  TextInput,\n} from \"react-native\";\n\nimport CustomButton from \"../components/CustomButton\";\n\nimport {\n  Alert,\n  SafeAreaView,\n  TouchableWithoutFeedback,\n} from \"react-native-web\";\n\nimport axios from \"axios\";\n\nvar loginInfo = {};\n\nfunction LoginScreen({ navigation }) {\n  var bp = require(\"../components/Path\");\n  // var storage = require(\"../tokenStorage.js\");\n\n  var loginEmail, loginPassword;\n\n  const [message, setMessage] = useState(\"\");\n\n  const attemptLogin = async (event) => {\n    event.preventDefault();\n\n    var loginInfo = {\n      email: loginEmail.value,\n      password: loginPassword.value,\n    };\n\n    var js = JSON.stringify(loginInfo);\n\n    var config = {\n      method: \"POST\",\n      url: bp.buildPath(\"api/login\"),\n\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data: js,\n    };\n\n    axios(config)\n      .then(function (response) {\n        var res = response.data;\n\n        if (res.error) {\n          setMessage(\"Invalid email or password\");\n        } else {\n          // storage.storeToken(res);\n          // var jwt = require(\"jsonwebtoken\");\n\n          // var ud = jwt.decode(storage.retrieveToken(), {\n          //   complete: true\n          // });\n\n          // var userId = ud.payload.userId;\n          // var firstName = ud.payload.firstName;\n          // var lastName = ud.payload.lastName;\n\n          // var user = {\n          //   firstName: firstName,\n          //   lastName: lastName,\n          //   id: userId\n          // };\n\n          // localStorage.setItem(\"user_data\", JSON.stringify(user));\n\n          window.location.href = \"/dashboard\";\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  return (\n    // Main View\n    <View style={styles.background}>\n      <View style={styles.smallPadding}></View>\n\n      <Image\n        style={{ height: 200, width: 200 }}\n        source={require(\"../assets/logo.png\")}\n      />\n\n      <View style={styles.smallPadding}></View>\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Username\"\n        secureTextEntry={false}\n        onChangeText={(newUsername) => setUsername(newUsername)}\n        defaultValue={username}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        secureTextEntry={true}\n        onChangeText={(newPassword) => setPassword(newPassword)}\n        defaultValue={password}\n      />\n\n      <View style={{ marginHorizontal: 30 }}>\n        <CustomButton\n          secondary\n          title=\"Login\"\n          loading={false}\n          disabled={false}\n          onPress={async () => {\n            try {\n\n              if(username == \"\" || password == \"\") {\n                navigation.navigate(\"Login\");\n              }\n              \n              const loginCredentials = { email: username, password: password };\n              var stringifyCreds = JSON.stringify(loginCredentials);\n\n              const response = await fetch(\n                \"https://shreddit-ucf.herokuapp.com/api/login\",\n                {\n                  method: \"POST\",\n                  body: stringifyCreds,\n                  headers: { \"Content-Type\": \"application/json\" },\n                }\n              );\n\n              console.log(response);\n\n              var responseRes = JSON.parse(await response.text());\n\n              console.log(responseRes);\n\n              if (responseRes.error == \"No account belongs to that email.\") {\n                console.log(\"Invalid Login Credentials\");\n              } else if (\n                responseRes.error ==\n                \"Account is not verified, please check email for verification email\"\n              ) {\n                console.log(\"Please verify your email\");\n              } else {\n                navigation.navigate(\"Home\");\n              }\n            } catch (error) {\n              console.log(\"ERROR HERE\");\n            }\n          }}\n          style={styles.loginButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    resizeMode: \"contain\",\n  },\n  input: {\n    height: \"5%\",\n    width: \"80%\",\n    margin: 10,\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10,\n  },\n  titleText: {\n    fontWeight: \"bold\",\n    color: \"white\",\n    fontSize: 30,\n  },\n  smallPadding: {\n    marginVertical: \"10%\",\n  },\n  loginButton: {\n    height: 60,\n    paddingHorizontal: 5,\n    marginVertical: 20,\n    left: 2,\n    marginHorizontal: 35,\n    borderRadius: 15,\n    width: 200,\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    // position: \"absolute\",\n    // width: \"80%\",\n    // height: \"7%\",\n    // borderRadius: 10,\n    // backgroundColor: \"#ACD1AF\",\n    // justifyContent: \"center\",\n  },\n});\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}